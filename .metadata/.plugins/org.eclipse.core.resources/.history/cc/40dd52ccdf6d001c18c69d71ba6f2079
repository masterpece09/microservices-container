package com.in28min.webservices.restfullwebservices.user;

import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;

import java.net.URI;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.in28min.webservices.restfullwebservices.user.dao.Post;
import com.in28min.webservices.restfullwebservices.user.dao.User;
import com.in28min.webservices.restfullwebservices.user.service.PostService;
import com.in28min.webservices.restfullwebservices.user.service.PostServiceImpl;
import com.in28min.webservices.restfullwebservices.user.service.UserService;

@RestController
@RequestMapping("/post")
public class PostController {
	
	@Autowired
	private PostService postService;
	
	@Autowired
	private UserService customUserService;

	@PostMapping("/user/{id}/posts")
	public ResponseEntity<CustomResponse> createPost(@RequestBody Post post, @PathVariable Integer userId) throws Exception {
		CustomResponse response = new CustomResponse();
		
		Optional<User> user = customUserService.findUserById(userId);
		
		if(user.isEmpty())
			throw new UserNotFoundException("User "+userId+" does not exist");
		
		
		post.setUser(user.get());
		post = postService.savePost(post);
		
		
		response.setCode("20000");
		response.setMessage("Post successfully created");
		response.setObject(post);

		WebMvcLinkBuilder linkToPost = linkTo(methodOn(this.getClass()).retrieveUserPosts(post.getId()));

		response.setLink(linkToPost.withRel("Post"));
		
		URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(post.getId()).toUri();

		return ResponseEntity.created(location).body(response);
	}
}
